---
import { getLangFromUrl, useTranslations } from '@i18n/utils';

const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);

import type { ManagerListData } from '@dtypes/layout_components';

import Flexblock from '@components/compositions/Flexblock.astro';
import FlexInline from '@components/compositions/FlexInline.astro';
import FixedFluid from '@components/compositions/FixedFluid.astro';
import ScrollX from '@components/compositions/ScrollX.astro';
import TrashIcon from '@components/icons/buttons/TrashIcon.astro';
import FluidFixed from '@components/compositions/FluidFixed.astro';
import VerticalCenter from '@components/blocks/VerticalCenter.astro';
import Button from '@components/blocks/Button.astro';

interface Props {
    input_name?:        string,
    readonly?:          boolean;
    corporations?:      ManagerListData[];
    [propName: string]: any;
}

const {
    input_name = 'managers',
    readonly = true,
    managers = [],
    ...attributes
} = Astro.props;

delete attributes.class
---

<Flexblock
    class:list={['manager-list', Astro.props.class]}
    {...attributes}
    gap='var(--space-s)'
    x-data={`{
        managers: ${JSON.stringify(managers)},
        managers_ids: [],
        generate_ids() {
            this.managers_ids = this.managers.map(e => e.character_id).join(',')
        },
        ${readonly ? '' :
        `add_manager(manager) {
            if (!manager) return

            const exist = this.managers.find((existing_manager) => existing_manager.name === manager.name)

            if (exist) return
            
            this.managers.push({
                alt: manager.name+' ${t('profile_picture')}',
                name: manager.name,
                roles: manager.roles,
                character_id: manager.character_id,
            })

            this.generate_ids()
        },
        remove_manager(name) {
            this.managers = this.managers.filter(item => item.name !== name)
            this.generate_ids()
        },
        semantic_list(locale = 'en-US', list) {
            return new Intl.ListFormat(locale, {
                style: 'long',
                type: 'conjunction',
            }).format(list)
        },
        translations: {
            pilot: '${t('pilot')}',
            director: '${t('director')}',
            administrator: '${t('administrator')}',
        }`}
    }`}
    x-init="generate_ids"
>
    <FlexInline
        justification='space-between'
        gap="var(--space-s)"
    >
        <Flexblock gap="var(--space-3xs)">
            <h2>{t('managers')}</h2>
            <small class="!mt-[var(--space-3xs)]" x-text={'`${managers.length} '+t('manager').toLowerCase()+'${managers.length != 1 ? `s` : ``}`'}>0 {t('managers').toLowerCase()}</small>
        </Flexblock>
        
        {!readonly && 
            <VerticalCenter>
                <Button
                    size='sm'
                    type="button"
                    color={'green'}
                    class="[ w-full ]"
                    x-on:click="add_manager(await show_personas_finder('pilot'))"
                >
                    {t('add_manager')}
                </Button>
            </VerticalCenter>
        }
    </FlexInline>

    <Flexblock gap='var(--space-3xs)'>
        <template x-for="manager in managers">
            <FixedFluid width='64px' class="[ manager-item ]">
                <picture>
                    <img x-bind:src="get_player_icon(manager.character_id, 256)" width="64" height="64" alt="manager.alt">
                </picture>
                <FluidFixed width='46px' breakpoint='60%'>
                    <VerticalCenter>
                        <Flexblock gap='0' class="[ w-full ]">
                            <span class="truncate text-[var(--highlight)]" x-text="manager.name" />
                            <small class="truncate" x-text={`semantic_list('${lang}', manager.roles.map((role) => translations[role]))`} />
                        </Flexblock>
                    </VerticalCenter>
                    <VerticalCenter>
                        {!readonly && 
                            <Button
                                class="[ action-button ]"
                                x-on:click="remove_manager(manager.name)"
                                size='sm'
                                type="button"
                                narrow={true}
                            >
                                <TrashIcon slot="icon" />
                            </Button>
                        }
                    </VerticalCenter>
                </FluidFixed>
            </FixedFluid>
        </template>

        <p x-bind:class="{ hidden: managers.length > 0 }">{t('empty_managers_text')}</p>
    </Flexblock>

    <input type="hidden" name={input_name} x-model="managers_ids">
</Flexblock>

<style lang="scss">
    .manager-list {
        animation: var(--slow-transition);

        img {
            object-fit: cover;
            width: 100%;
            height: 100%;
        }

        .manager-item {
            @media (hover: hover) {
                .action-button {
                    transition: var(--fast-transition);
                    opacity: 0;
                }

                &:hover,
                &:focus-within {
                    .action-button {
                        opacity: 1;
                    }
                }
            }
        }

        &.disabled {
            pointer-events: none;
            opacity: 0.25;
        }
    }
</style>