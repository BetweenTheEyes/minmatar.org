---
import { getLangFromUrl, useTranslations } from '@i18n/utils';

const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);

import Flexblock from '@components/compositions/Flexblock.astro';
import FlexInline from '@components/compositions/FlexInline.astro';
import FixedFluid from '@components/compositions/FixedFluid.astro';
import TrashIcon from '@components/icons/buttons/TrashIcon.astro';
import FluidFixed from '@components/compositions/FluidFixed.astro';
import VerticalCenter from '@components/blocks/VerticalCenter.astro';
import Button from '@components/blocks/Button.astro';

interface Props {
    [propName: string]: any;
}

const {
    ...attributes
} = Astro.props;

delete attributes.class
---

<Flexblock
    class:list={['corporation-list', Astro.props.class]}
    {...attributes}
    gap='var(--space-s)'
    x-data={`{
        corporations: [],
        add_corporation(corporation) {
            if (!corporation) return

            const exist = this.corporations.find((existing_corporation) => existing_corporation.name === corporation.name)

            if (exist) return
            
            this.corporations.push({
                alt: corporation.name+' ${t('logo').toLowerCase()}',
                name: corporation.name,
                members_count: corporation.members_count,
                corporation_id: corporation.corporation_id,
            })
        },
        remove_corporation(name) {
            this.corporations = this.corporations.filter(item => item.name !== name)
        },
    }`}
>
    <FlexInline
        justification='space-between'
        gap="var(--space-s)"
    >
        <Flexblock gap="var(--space-3xs)">
            <h2>{t('corporations')}</h2>
            <small class="!mt-[var(--space-3xs)]" x-text={'`${corporations.length} '+t('corporation').toLowerCase()+'${corporations.length != 1 ? `s` : ``}`'}>0 {t('corporations').toLowerCase()}</small>
        </Flexblock>

        <VerticalCenter>
            <Button
                size='sm'
                type="button"
                color={'green'}
                class="[ w-full ]"
                x-on:click="add_corporation(await show_corporations_finder())"
            >
                {t('add_corporation')}
            </Button>
        </VerticalCenter>
    </FlexInline>

    <Flexblock gap='var(--space-3xs)'>
        <template x-for="corporation in corporations">
            <FixedFluid width='64px'>
                <img x-bind:src="get_corporation_logo(corporation.corporation_id, 64)" width="64" height="64" alt="corporation.alt">
                <FluidFixed width="64px">
                    <VerticalCenter>
                        <Flexblock gap='0'>
                            <span class="text-[var(--highlight)]" x-text="corporation.name" />
                            <small x-text={`corporation.members_count+' ${t('members_count').toLowerCase()}'`} />
                        </Flexblock>
                    </VerticalCenter>
                    <VerticalCenter>
                        <Button x-on:click="remove_corporation(corporation.name)" size='sm' type="button">
                            <TrashIcon slot="icon" />
                        </Button>
                    </VerticalCenter>
                </FluidFixed>
            </FixedFluid>
        </template>

        <p x-bind:class="{ hidden: corporations.length > 0 }">{t('empty_corporations_text')}</p>
    </Flexblock>
</Flexblock>

<style lang="scss">
    .corporation-list {
        animation: var(--slow-transition);

        &.disabled {
            pointer-events: none;
            opacity: 0.25;
        }
    }
</style>