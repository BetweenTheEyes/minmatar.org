---
import { getLangFromUrl, useTranslations, useTranslatedPath } from '@i18n/utils';

const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);
const translatePath = useTranslatedPath(lang);

import { is_prod_mode } from '@helpers/env'
import { HTTP_404_Not_Found, HTTP_403_Forbidden } from '@helpers/http_responses'

if (is_prod_mode())
    return HTTP_404_Not_Found()

import type { User } from '@dtypes/jwt'
import * as jose from 'jose'

const auth_token = Astro.cookies.has('auth_token') ? Astro.cookies.get('auth_token').value : false
const user:User | false = auth_token ? jose.decodeJwt(auth_token) as User : false

if (!auth_token || !user)
    return HTTP_404_Forbidden()

import type { GroupRequestUI } from '@dtypes/layout_components'
import { get_all_groups_requests } from '@helpers/fetching/corporations'

let group_requests:GroupRequestUI[] = []
let get_all_corporations_error:string | false = false
try {
    group_requests = await get_all_groups_requests(auth_token, user.user_id)
} catch (error) {
    get_all_corporations_error = is_prod_mode() ? t('get_all_corporations_error') : error.message
}

import Viewport from '@layouts/Viewport.astro';

import PageDefault from '@components/page/PageDefault.astro';
import PageTitle from '@components/page/PageTitle.astro';

import Flexblock from '@components/compositions/Flexblock.astro';
import Wrapper from '@components/compositions/Wrapper.astro';
import FlexInline from '@components/compositions/FlexInline.astro';
import FixedFluid from '@components/compositions/FixedFluid.astro';

import PersonaList from '@components/blocks/PersonaList.astro';
import GroupAutoAccept from '@components/blocks/GroupAutoAccept.astro';
import VerticalCenter from '@components/blocks/VerticalCenter.astro';
import ComponentBlock from '@components/blocks/ComponentBlock.astro';
import Button from '@components/blocks/Button.astro';
import Input from '@components/blocks/Input.astro';
import Select from '@components/blocks/Select.astro';

import MagnifierIcon from '@components/icons/buttons/MagnifierIcon.astro';


const page_title = t('groups.add.page_title');
---

<Viewport
    title={page_title}
    components={{
        personas_finder: true,
        corporation_finder: true,
        alliance_finder: true    
    }}
>
    <PageDefault
        cover={{
            image: "/images/groups-cover.jpg",
            image_990: "/images/groups-cover-990.jpg",
            alt: t('groups.cover_alt'),
            animated: false,
            scrollable: true,
            overlay: true
        }}
        x-data={`{
            group_name: '',
        }`}
    >
        <FlexInline slot="header" justification='space-between'>
            <PageTitle x-text={`group_name != '' ? group_name+' ${t('group')}' : '${page_title}'`}>
                {page_title}
            </PageTitle>
            <FlexInline>
                <Button class="[ !hidden md:!flex ]" href={translatePath('/groups/list/')}>
                    <MagnifierIcon slot="icon" />
                    {t('view_groups')}
                </Button>
            </FlexInline>
        </FlexInline>

        <form
            method="POST"
            x-data={`{
                'submitted': false
            }`}
            x-on:submit.prevent="submitted = true;"
        >
            <Wrapper max_width="var(--max-col-width)" padding_inline="0" padding_block="0" class="[ w-full ]">
                <Flexblock gap='var(--space-3xs)' class="[ w-full ]">
                    <ComponentBlock>
                        <Flexblock class="[ w-full ]" gap='var(--space-m)'>
                            <h2>{t('general')}</h2>

                            <Flexblock>
                                <VerticalCenter>
                                    <FixedFluid class="[ w-full items-center ]" gap="var(--space-3xs)" width="250px" breakpoint="60%">
                                        <label for="name">{t('name')}</label>
                                        <Input id="name" name="name" type="text" x-model="group_name" required />
                                    </FixedFluid>
                                </VerticalCenter>

                                <VerticalCenter>
                                    <FixedFluid class="[ w-full items-center ]" gap="var(--space-3xs)" width="250px" breakpoint="60%">
                                        <label for="visibility">{t('visibility')}</label>
                                        <Select id="visibility" x-model="visibility">
                                            <option value="astrahus">Public</option>
                                            <option value="fortizar">Private</option>
                                            <option value="keepstar">Unlisted</option>
                                        </Select>
                                    </FixedFluid>
                                </VerticalCenter>
                            </Flexblock>
                        </Flexblock>
                    </ComponentBlock>
                    
                    <ComponentBlock class="w-full">
                        <PersonaList
                            label={t('manager')}
                            add_button_text={t('add_manager')}
                            input_name="managers"
                            empty_text={t('empty_managers_text')}
                            readonly={false}
                        />
                    </ComponentBlock>

                    <GroupAutoAccept />

                    <ComponentBlock>
                        <Button type="button" color={'green'} class="[ w-full ]">{t('add_group')}</Button>
                    </ComponentBlock>
                </Flexblock>
            </Wrapper>
        </form>
	</PageDefault>
</Viewport>

<style lang="scss">
    h3 {
        margin-block-start: var(--space-l);
    }
</style>