---
import { getLangFromUrl, useTranslations, useTranslatedPath } from '@i18n/utils';

const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);
const translatePath = useTranslatedPath(lang)

import { is_prod_mode } from '@helpers/env'

import type { User } from '@dtypes/jwt'
import * as jose from 'jose'

const auth_token = Astro.cookies.has('auth_token') ? Astro.cookies.get('auth_token').value : false
const user:User | false = auth_token ? jose.decodeJwt(auth_token) as User : false

if (!auth_token || !user) {
    Astro.cookies.set('redirect_after_auth', Astro.url.href, { path: '/' })
    return Astro.redirect(get_auth_url())
}

import type { Alert } from '@dtypes/layout_components'
import type { Character } from '@dtypes/api.minmatar.org'
import { query_string } from '@helpers/string';

let redirect:string | false = false
let status = true
let removed_character_id:number | false = false
let removed_character_name:string | false = false
let alert:Alert | false = false

if (Astro.request.method === "DELETE") {
    /*removed_character_id = parseInt(Astro.url.searchParams.get('id'))
    removed_character_name = Astro.url.searchParams.get('character_name')
    let delete_character_error:string | false = false

    try {
        status = await delete_characters(auth_token, removed_character_id)
    } catch (error) {
        delete_character_error = (is_prod_mode() ? t('delete_character_error') : error.message)
    }

    console.log(delete_character_error)

    if (status) {
        const primary_character = Astro.cookies.has('primary_pilot') ? JSON.parse(Astro.cookies.get('primary_pilot').value) : null
        const primary_character_id = primary_character ? parseInt(primary_character.character_id) : null

        if (removed_character_id == primary_character_id) {
            Astro.cookies.delete('primary_pilot', { path: '/' })

            redirect = translatePath('/account')
        }
    } else {
        const error_msg = (is_prod_mode() || !delete_character_error) ? t('delete_character_error') : delete_character_error

        const params = query_string({
            id: removed_character_id.toString(),
            character_name: removed_character_name,
            message: error_msg,
        })

        alert = {
            title: t('remove_pilot_dialog_title'),
            content: error_msg,
            partial: `${translatePath('/partials/dialog_with_character/')}?${params}`,
        }
    }*/
}

import type { Group } from '@dtypes/api.minmatar.org'
import { get_available_groups } from '@helpers/api.minmatar.org/groups'

let groups:Group[] = []
let get_available_groups_error:string | false = false
try {
    groups = await get_available_groups(auth_token)
} catch (error) {
    get_available_groups_error = is_prod_mode() ? t('get_available_groups_error') : error.message
}

import { get_app_url } from '@helpers/env'
const GROUPSLIST_PARTIAL_URL = `${get_app_url()}/partials/groups_list/`

import Partial from '@layouts/Partial.astro';
import FlexInline from '@components/compositions/FlexInline.astro';
import Button from '@components/blocks/Button.astro';
import GroupsList from '@components/blocks/GroupsList.astro';
import RefreshIcon from '@components/icons/buttons/RefreshIcon.astro';
---

<Partial>
    <GroupsList groups={groups}>
        {get_available_groups_error !== false &&
            <FlexInline justification='space-between'>
                <p>{get_available_groups_error}</p>
                <Button
                    size='sm'
                    hx-get={GROUPSLIST_PARTIAL_URL}
                    hx-target="#pilots-list"
                    hx-on::before-request="this.setAttribute('disabled','')"
                    hx-on::after-request="this.removeAttribute('disabled')"
                    hx-swap="outerHTML transition:true"
                    type="button"
                >
                    <RefreshIcon slot="icon" />
                    {t('reload')}
                </Button>
            </FlexInline>
        }
    </GroupsList>
</Partial>